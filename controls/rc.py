from http.server import HTTPServer
from threading import Thread

from lib.threading2 import LoggingExceptionsThread
from controls.base import ControlBase
from controls.rc_web import Web
from config import Config
from pathlib import Path


class RC(ControlBase, LoggingExceptionsThread):
    """
        Cars remote controls via local HTTPServer. It starts blocking WebServer in its thread whenever it fails to start + showing component status with actions generated by this control.
        * output = responding GET requests by giving WebPage content
        * input = responding POST requests from WebPage buttons > translate to actions for engine actuator
    """
    def __init__(self, control) -> None:
        super().__init__(period=10, control=control)
        LoggingExceptionsThread.__init__(self)
        Web._control = self._control
        self.web_server = None

    def stop(self):
        self.web_server.stop()
        super().stop()

    def iterate(self):
        if not self.web_server:
            web_server = WebServer()
            web_server.start()
            self.web_server = web_server

    @property
    def state(self) -> str:
        return f'{super().state}' if self.web_server.is_alive() else '‚ùå'


class WebServer(Thread):
    def __init__(self):
        super().__init__()
        self.web_server = HTTPServer(Config.RC_HTTP_SERVER if Path.exists(Path('/home/pi')) else
                                     Config.LOCAL_RC_HTTP_SERVER, Web)

    def run(self):
        self.web_server.serve_forever()  # blocking

    def stop(self):
        self.web_server.server_close()
        self.web_server.shutdown()
